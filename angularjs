ES6:

1) Template String
2) Fat Arrow Function
3) destructing (object, array)
3) Map 
4) Set
5) Promise


TypeScript is superset of JavaScript

npm install -g typescript

tsc  (.ts -> .js)

DataTypes of TS:

1) number
2) string
3) boolean
4) any
5) enum
6) Array
7) void

Features of TypeScript:
1) static typings
2) Class & Objects
3) Inheritance 
- extends
- Interface - implements
4) Generics
5) Union Types
6) Module Loader





AngularJS

angularjs.org - 1	- web
angularjs.io   - 2, 4, 5 - web & mobile

MVC

























--------------------------------------

Create a class Product 
- with attributes
	id?: number
	name?: string
	category?: string
	description?: string
	price?: number

Create a class ProductRepository implements IProductRepository
- with attribute 
	Array<Product>
- with Behaviour 
	- addProduct(product : Product) : void
	- updateProduct(product : Product) : void
	- deleteProduct(pid:number) : void
   	- getProductById(pid:number) : Product
	- getProducts() : Array<Product>

Test :
Create few Product objects, add it inside ProductRepository 
Test updateProduct,  deleteProduct,  getProductById, getProducts also

-----------------------------------------

Features of Angular 2
1) Two-Way Data Binding
2) Powerful Routing Support
3) Expressive HTML
4) Modular by Design
5) Built in Back End Support (Database, Log, WebService)
6) Active Community
	










Key differences between Angular 1 & Angular 2
1) Support for ES6
2) Components are new controllers
3) Directives *ngFor
4) Data Bindings
5) $scopes are out
6) Filters are renamed to Pipes
7) Platform specific Bootstrap
8) Services  - Factory, Abstract Factory, Utilities, Singleton
9) Mobile Support














Angular Architecture:

Component
Service
Directive




class TaskComponent {
......
}


















The class Decorator

1) @NgModule
2) @Component
3) @Injectable
4) @Directive
5) @Pipe 



Data Binding

1. Interpolation
Data is bind from component to View
{{}}
2. Property Binding  (One way binding)
Data is bind from component to property of an HTML control in the view like
[]
3. Event Binding
The DOM Events are bind from View to a method in the Component
()
4. Two-way Binding/Model Binding - banana in a box
The data flows in both directions from view to component or from component to view
[(ngModel)]



WebPack - requirejs
Gulp -  commonjs


Installing and Getting started with Angular 2

Install Angular CLI:
npm install -g @angular/cli

Angular CLI version:
ng -v

Create new Project:
ng new storeapp

cd storeapp

Install the dependencies:
npm install

package.json:
scripts
dependencies
devDependencies

Start the Server: (js,html,css,sass,... in memory)
ng serve
ng serve --prod

http://localhost:4200


js,html,css,sass... files: 
ng build   

dist folder

-----------------------------------------------------------------


package.json :
dependencies


tsconfig.json:
tsc compiler argument


karma.conf.js:
Karma


lint: (ng lint)
static code analyzer - typescript

.angular-cli.json  

index.html, main.ts


-------------------------------------------------------------

.angular-cli.json:

index.html

main.ts  --->

import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

platformBrowserDynamic().bootstrapModule(AppModule);

AppModule

AppComponent

app.component.html
app.component.css


The Class Decorator

1) @NgModule

declarations
// Components, Directives, Pipes

imports
// BrowserModule
+ user defined module

providers
Service
// Service - singleton
// Dependency Injection

bootstrap
// Component

exports - reuse components

Two Type of Module:
1) Root Module
2) Feature Module

--------------

2) @Component

- selector 		- string 	 - <store>
- templateUrl	- string	 - .html
- styleUrls		- string[]	 - .css
- template		- string
- styles		- string[]


--------------

3) @Injectable()

--------------

4) @Directive

- selector 		- string  

Build-in directive:
*ngFor, *ngIf, *ngIf else, *ngSwitch
--------------

5) @Pipes

- implements PipeTransform

--------------
-------------------------------------------------------------
RouteModule.for

ProductComponent		/product
CartDetailsComponent	/cart
CheckoutComponent		/checkout



AppComponent
- template: "<router-outlet></router-outlet>"


Programmatic
private router : Router
 this.router.navigateByUrl("/cart");

Declarative
routerLink=""  - RouteModule
---------------------------------------------------------------------------------


https://goo.gl/SFs8PG

data.js

 "devDependencies": {
     "json-server": "0.12.1"
  }

"scripts" : { "json" : "json-server data.js -p 3500" }

npm install
npm run json



/products  		GET
/products/1 	GET
/products  		POST  - INSERT - application/json
/products/id  	PUT  - UPDATE - application/json
/products/1	DELETE

/orders		GET
/orders/1 		GET
/orders		POST  - INSERT - application/json
/orders/id  		PUT  - UPDATE - application/json
/orders/1		DELETE


